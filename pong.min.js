'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Controller = function Controller(name, io) {
    _classCallCheck(this, Controller);

    this.velocity = 0;
    this.up = document.getElementById('top');
    this.down = document.getElementById('bottom');

    // this.up.addEventListener('mousedown', (event) => {
    //     io.emit(name, -1);
    //     console.log(-1);
    // });

    // this.up.addEventListener('mouseup', (event) => {
    //     io.emit(name, 0);
    //     console.log(0);
    // });

    this.up.addEventListener('touchstart', function (event) {
        io.emit(name, -1);
        console.log(-1);
    });

    this.up.addEventListener('touchend', function (event) {
        io.emit(name, 0);
        console.log(0);
    });

    // ---

    // this.down.addEventListener('mousedown', (event) => {
    //     io.emit(name, 1);
    //     console.log(1);
    // });

    // this.down.addEventListener('mouseup', (event) => {
    //     io.emit(name, 0);
    //     console.log(0);
    // });

    this.down.addEventListener('touchstart', function (event) {
        io.emit(name, 1);
        console.log(1);
    });

    this.down.addEventListener('touchend', function (event) {
        io.emit(name, 0);
        console.log(0);
    });
};
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Player = function () {
    function Player(game, x, y) {
        _classCallCheck(this, Player);

        this.width = 10;
        this.height = 70;

        this.game = game;
        this.x = x;
        this.y = y;
        this.velocity = 0;
    }

    _createClass(Player, [{
        key: 'update',
        value: function update() {
            this.y += this.velocity;

            if (this.y + this.height >= this.game.height) {
                this.y = this.game.height - this.height;
            }

            if (this.y < 0) {
                this.y = 0;
            }
        }
    }, {
        key: 'draw',
        value: function draw(ctx) {
            ctx.fillStyle = '#fff';
            ctx.fillRect(this.x, this.y, this.width, this.height);
        }
    }, {
        key: 'hits',
        value: function hits(ball) {
            return false;
        }
    }]);

    return Player;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Pong = function () {
    function Pong(io) {
        _classCallCheck(this, Pong);

        this.width = 900;
        this.height = 500;
        this.prevTimestamp = null;
        this.puck = new Puck(this);
        this.players = [new Player(this, 20, this.height / 2 - 35), new Player(this, this.width - 20, this.height / 2 - 35)];

        this.io = io;
        this.canvas = this.setupCanvas();
        this.ctx = this.canvas.getContext('2d');
        this.bindings();
    }

    _createClass(Pong, [{
        key: 'setupCanvas',
        value: function setupCanvas() {
            var canvas = document.getElementsByTagName('canvas')[0];
            canvas.height = this.height;
            canvas.width = this.width;

            return canvas;
        }
    }, {
        key: 'start',
        value: function start() {
            this.prevTimestamp = new Date().getTime();

            requestAnimationFrame(this.animFrame.bind(this));
        }
    }, {
        key: 'animFrame',
        value: function animFrame(timestamp) {
            var progress = timestamp - this.prevTimestamp;

            if (progress < 2000) {
                this.update();
                requestAnimationFrame(this.animFrame.bind(this));
            }
        }
    }, {
        key: 'update',
        value: function update() {
            this.puck.update();
            this.players[0].update();
            this.players[1].update();
            this.draw(this.ctx);
        }
    }, {
        key: 'draw',
        value: function draw(ctx) {
            ctx.fillStyle = '#000';
            ctx.fillRect(0, 0, this.width, this.height);

            this.puck.draw(ctx);
            this.players[0].draw(ctx);
            this.players[1].draw(ctx);
        }
    }, {
        key: 'bindings',
        value: function bindings() {
            var _this = this;

            this.io.on('controller1', function (data) {
                _this.players[0].velocity = data;
            });

            this.io.on('controller2', function (data) {
                _this.players[1].velocity = data;
            });
        }
    }]);

    return Pong;
}();
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Puck = function () {
    function Puck(game) {
        _classCallCheck(this, Puck);

        this.radius = 10;
        this.xVelocity = 5;
        this.yVelocity = 0;

        this.game = game;
        this.size = 20;
        this.x = game.width / 2;
        this.y = game.height / 2;
    }

    _createClass(Puck, [{
        key: 'update',
        value: function update() {
            this.x += this.xVelocity;
            this.y += this.yVelocity;

            if (this.x >= this.game.width) {
                this.reset();
            }

            if (this.x <= 0) {
                this.reset();
            }

            if (this.y <= 0) {
                this.yVelocity = -1 * this.yVelocity;
            }

            if (this.y >= this.game.height) {
                this.yVelocity = -1 * this.yVelocity;
            }

            if (this.hitsPlayer(this.game.players[0])) {
                this.xVelocity = -1 * this.xVelocity;
                this.yVelocity = (this.y - this.game.players[0].y + this.game.players[0].height / 2) / 35;
            }

            if (this.hitsPlayer(this.game.players[1])) {
                this.xVelocity = -1 * this.xVelocity;
                this.yVelocity = (this.y - this.game.players[1].y + this.game.players[1].height / 2) / 35;
            }
        }
    }, {
        key: 'draw',
        value: function draw(ctx) {
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.radius, 2 * Math.PI, false);
            ctx.fillStyle = '#fff';
            ctx.fill();
        }
    }, {
        key: 'reset',
        value: function reset() {
            this.x = game.width / 2;
            this.y = game.height / 2;
            this.yVelocity = 0;
        }
    }, {
        key: 'hitsPlayer',
        value: function hitsPlayer(player) {
            var DeltaX = this.x - Math.max(player.x, Math.min(this.x, player.x + player.width));
            var DeltaY = this.y - Math.max(player.y, Math.min(this.y, player.y + player.height));

            return DeltaX * DeltaX + DeltaY * DeltaY < this.radius * this.radius;
        }
    }]);

    return Puck;
}();
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Socket = function Socket() {
    _classCallCheck(this, Socket);

    this.io = io('//37.120.166.150:6001');
};
